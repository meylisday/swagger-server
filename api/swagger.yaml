---
swagger: "2.0"
info:
  description: "This is a sample server Events server.  You can find out more about\
    \     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,\
    \ #swagger](http://swagger.io/irc/).      For this sample, you can use the api\
    \ key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Events"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "events.swagger.io"
basePath: "/v2"
tags:
- name: "event"
  description: "Operations about event"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /event:
    get:
      tags:
      - "event"
      summary: "Get events"
      description: ""
      operationId: "getEvents"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
      x-swagger-router-controller: "Event"
    post:
      tags:
      - "event"
      summary: "Create event"
      description: "This can only be done by the logged in event."
      operationId: "createEvent"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created event object"
        required: true
        schema:
          $ref: "#/definitions/Event"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "Event"
  /event/{id}:
    get:
      tags:
      - "event"
      summary: "Get event by id"
      description: ""
      operationId: "getEventById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The name that needs to be fetched. Use event for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Event"
        400:
          description: "Invalid id supplied"
        404:
          description: "Event not found"
      x-swagger-router-controller: "Event"
    put:
      tags:
      - "event"
      summary: "Updated event"
      description: "This can only be done by the logged in event."
      operationId: "updateEvent"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated Event object"
        required: true
        schema:
          $ref: "#/definitions/Event"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Event"
        400:
          description: "Invalid Event supplied"
        404:
          description: "Event not found"
      x-swagger-router-controller: "Event"
    delete:
      tags:
      - "event"
      summary: "Delete event"
      description: "This can only be done by the logged in event."
      operationId: "deleteEvent"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid id supplied"
        404:
          description: "Event not found"
      x-swagger-router-controller: "Event"
  /event/{id}/comment/{comment_id}:
    delete:
      tags:
      - "comment"
      summary: "Delete comment"
      description: "This can only be done by the logged in event."
      operationId: "deleteComment"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      - name: "comment_id"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid id supplied"
        404:
          description: "Event not found"
      x-swagger-router-controller: "Comment"
  /event/{id}/comment:
    post:
      tags:
      - "comment"
      summary: "Create comment"
      description: "This can only be done by the logged in event."
      operationId: "createComment"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Created event's comment"
        required: true
        schema:
          $ref: "#/definitions/Comment"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Comment"
      x-swagger-router-controller: "Comment"
  /settings/{type}:
    get:
      tags:
      - "settings"
      summary: "Get settings by type"
      description: ""
      operationId: "getSettingsByType"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        description: "Settings type"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
        400:
          description: "Invalid id supplied"
        404:
          description: "Settings not found"
      x-swagger-router-controller: "Settings"
    put:
      tags:
      - "settings"
      summary: "Update bank settings"
      description: "This can only be done by the logged in event."
      operationId: "updatebankSettings"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Update settings"
        required: true
        schema:
          type: "object"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "Settings"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Event:
    type: "object"
    properties:
      date:
        type: "string"
      type:
        type: "string"
      label:
        type: "string"
      number:
        type: "string"
      id:
        type: "string"
      modified:
        type: "string"
      created:
        type: "string"
      comments:
        type: "array"
        items:
          $ref: "#/definitions/Comment"
    xml:
      name: "Event"
    example:
      date: "date"
      number: "number"
      comments:
      - id: "id"
        text: "text"
        time: "time"
      created: "created"
      modified: "modified"
      label: "label"
      id: "id"
      type: "type"
  Comment:
    type: "object"
    properties:
      id:
        type: "string"
      text:
        type: "string"
      time:
        type: "string"
    example:
      id: "id"
      text: "text"
      time: "time"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
